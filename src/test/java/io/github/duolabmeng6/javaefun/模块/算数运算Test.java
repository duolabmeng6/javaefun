package io.github.duolabmeng6.javaefun.模块;

import org.junit.Test;

import static io.github.duolabmeng6.javaefun.核心支持库.接口算数运算.*;
import static org.junit.Assert.assertEquals;

public class 算数运算Test {
    public static void 判断是否相同(Object func, Object value) {
        // 如果是双精度小数 取小数点后5位
        if (func instanceof Double) {
            func = Double.parseDouble(String.format("%.5f", func));
        }
        if (value instanceof Double) {
            value = Double.parseDouble(String.format("%.5f", value));
        }
        assertEquals(func, value);
    }

    @Test
    public void 测试_算数运算() {
        判断是否相同(四舍五入(123.144, 2), 123.14);
        判断是否相同(四舍五入(123.146, 2), 123.15);

        判断是否相同(取绝对值(-1),  (double)1);
        判断是否相同(取绝对值(-100),  (double)100);
        判断是否相同(取绝对值(-0.1),  (double)0.1);
        判断是否相同(取绝对值(0.1),  (double)0.1);

        判断是否相同(取整(100.111), 100);
//        判断是否相同(到整数("8852791.5"), 8852791);
//        判断是否相同(到整数("-8852791.5"), -8852791);
//        判断是否相同(到整数("8852791.5123456789"), 8852791);
//        判断是否相同(到整数("-8852791.5123456789"), -8852791);

        判断是否相同(求次方(2, 2), (double) 4);
        判断是否相同(求次方(4, 2), (double)16);
        判断是否相同(求余弦(30), 0.15425144988758405);
        判断是否相同(求反正切(30), 1.5374753309166493);
        判断是否相同(求平方根(2), 1.4142135623730951);
        判断是否相同(求正切(30), -6.405331196646276);
        判断是否相同(求正弦(30), -0.9880316240928617);
        判断是否相同(取随机数(1, 1), 1);
//        判断是否相同(到整数("8852791.5"), 8852791);
//        判断是否相同(到整数("+8852791.5"), 8852791);
//        判断是否相同(到整数("-8852791.5"), -8852791);
//        判断是否相同(到整数(8852791.5), 8852791);

        判断是否相同(取符号(-5.0), -1);
        判断是否相同(取符号(0.0), 0);
        判断是否相同(取符号(5.0), 1);
        判断是否相同(取符号(-123.45), -1);
        判断是否相同(取符号(123.45), 1);

        判断是否相同(绝对取整(5.0), 5);
        判断是否相同(绝对取整(0.0), 0);
        判断是否相同(绝对取整(-5.0), -5);
        判断是否相同(绝对取整(123.45), 123);
        判断是否相同(绝对取整(-123.45), -123);
        判断是否相同(绝对取整(0.1), 0);
        判断是否相同(绝对取整(-0.1), 0);

        判断是否相同(求自然对数(1.0), 0.0);
        判断是否相同(求自然对数(2.0), 0.6931471805599453);
        判断是否相同(求自然对数(10.0), 2.302585092994046);
        判断是否相同(求自然对数(Math.E), 1.0);
        判断是否相同(求自然对数(0.5), -0.6931471805599453);
        判断是否相同(求自然对数(0.0), Double.NEGATIVE_INFINITY);
        判断是否相同(求自然对数(-1.0), Double.NaN);

        判断是否相同(求反对数(0.0), 1.0);
        判断是否相同(求反对数(1.0), Math.E);
        判断是否相同(求反对数(2.0), 7.3890560989306495);
        判断是否相同(求反对数(10.0), 22026.465794806718);
        判断是否相同(求反对数(-1.0), 0.36787944117144233);
        判断是否相同(求反对数(-2.0), 0.1353352832366127);


        判断是否相同(向下取整(3.5), 3.0);
        判断是否相同(向下取整(-3.5), -4.0);
        判断是否相同(向上取整(3.5), 4.0);
        判断是否相同(向上取整(-3.5), -3.0);

        置随机数种子(1);
        判断是否相同(取随机数(1,1), 1);


    }

}